// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package v1

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Sort int8

const (
	SortDESC Sort = 0
	SortASC  Sort = 1
)

var EnumNamesSort = map[Sort]string{
	SortDESC: "DESC",
	SortASC:  "ASC",
}

var EnumValuesSort = map[string]Sort{
	"DESC": SortDESC,
	"ASC":  SortASC,
}

func (v Sort) String() string {
	if s, ok := EnumNamesSort[v]; ok {
		return s
	}
	return "Sort(" + strconv.FormatInt(int64(v), 10) + ")"
}

type QueryOrder struct {
	_tab flatbuffers.Table
}

func GetRootAsQueryOrder(buf []byte, offset flatbuffers.UOffsetT) *QueryOrder {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QueryOrder{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsQueryOrder(buf []byte, offset flatbuffers.UOffsetT) *QueryOrder {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &QueryOrder{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *QueryOrder) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QueryOrder) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QueryOrder) KeyName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *QueryOrder) Sort() Sort {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Sort(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *QueryOrder) MutateSort(n Sort) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func QueryOrderStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func QueryOrderAddKeyName(builder *flatbuffers.Builder, keyName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(keyName), 0)
}
func QueryOrderAddSort(builder *flatbuffers.Builder, sort Sort) {
	builder.PrependInt8Slot(1, int8(sort), 0)
}
func QueryOrderEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type RangeQuery struct {
	_tab flatbuffers.Table
}

func GetRootAsRangeQuery(buf []byte, offset flatbuffers.UOffsetT) *RangeQuery {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RangeQuery{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRangeQuery(buf []byte, offset flatbuffers.UOffsetT) *RangeQuery {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RangeQuery{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RangeQuery) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RangeQuery) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RangeQuery) Begin() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeQuery) MutateBegin(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *RangeQuery) End() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeQuery) MutateEnd(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func RangeQueryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RangeQueryAddBegin(builder *flatbuffers.Builder, begin uint64) {
	builder.PrependUint64Slot(0, begin, 0)
}
func RangeQueryAddEnd(builder *flatbuffers.Builder, end uint64) {
	builder.PrependUint64Slot(1, end, 0)
}
func RangeQueryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
