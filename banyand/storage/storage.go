// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package storage

import (
	"context"
	"io"

	"github.com/apache/skywalking-banyandb/banyand/discovery"
	"github.com/apache/skywalking-banyandb/banyand/kv"
	"github.com/apache/skywalking-banyandb/pkg/run"
)

// KVType defines the kind of a KV storage
type KVType uint8

const (
	// KVTypeNormal is normal KV storage
	KVTypeNormal KVType = 0
	// KVTypeTimeSeries is a time-series KV storage
	KVTypeTimeSeries KVType = 1
)

// Database is the storage manager which implements the physical data model
type Database interface {
	run.Config
	run.PreRunner
	run.Service
	// Register a Plugin into a Database
	Register(plugin Plugin)
}

// NewDB returns a new Database
func NewDB(_ context.Context, repo discovery.ServiceRepo) (Database, error) {
	return &DB{repo: repo}, nil
}

// Plugin helps Database create kv storage with a specific data model.
// Trace, metric and log series could be registered as Plugin to save data into kv regardless of where the kv
// are placed on the physical devices.
type Plugin interface {
	// ID is unique identifier
	ID() string
	// Init the Plugin, and generate KVSpec to indicate how kv storages are built
	Init() []KVSpec
	// Start the Plugin and inject the a func to get the AccessPoint
	Start(GetAccessPoint)
}

// KVSpec defines the behaviours of a KV store.
// Database get these specs which are generated by Plugin to create underlying kv storage.
type KVSpec struct {
	Name           string
	Type           KVType
	AutoGenKey     bool
	TimeSeriesHook kv.Hook
}

// AccessPoint is a reference to a underlying area.
// A single write will be split into several kv writes. These writes can be placed into the same area though an AccessPoint
// even though the area rotation(a new area replaces the old area) takes place.
// When a new area is created, the old one can be closed until all AccessPoint refers to it are closed.
type AccessPoint interface {
	io.Closer
	Store(name string) kv.Store
	TimeSeriesStore(name string) kv.TimeSeriesStore
}

// GetAccessPoint returns the AccessPoint which refers to the current active area.
type GetAccessPoint func() AccessPoint
